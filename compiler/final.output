Terminals unused in grammar

   "+"
   "-"
   "*"
   "/"


Grammar

    0 $accept: program $end

    1 program: stmt
    2        | stmt "\n"

    3 stmt: st
    4     | stmt st

    5 st: exp
    6   | defstmt
    7   | pstmt

    8 exp: numop
    9    | logop
   10    | number
   11    | bval
   12    | var
   13    | ifexp

   14 var: str

   15 pstmt: '(' PNUM exp ')'
   16      | '(' PBOOL exp ')'

   17 numop: plus
   18      | minus
   19      | multi
   20      | divide
   21      | mod
   22      | greater
   23      | smaller
   24      | equal

   25 plus: '(' '+' exp expp ')'

   26 expp: exp
   27     | expp exp

   28 minus: '(' '-' exp exp ')'

   29 multi: '(' '*' exp expm ')'

   30 expm: exp
   31     | expm exp

   32 divide: '(' '/' exp exp ')'

   33 mod: '(' MOD exp exp ')'

   34 greater: '(' '>' exp exp ')'

   35 smaller: '(' '<' exp exp ')'

   36 equal: '(' '=' exp expe ')'

   37 expe: exp
   38     | expe exp

   39 logop: and
   40      | or
   41      | not

   42 and: '(' AND exp expa ')'

   43 expa: exp
   44     | expa exp

   45 or: '(' OR exp expo ')'

   46 expo: exp
   47     | expa exp

   48 not: '(' NOT exp ')'

   49 defstmt: '(' DEFINE var exp ')'

   50 ifexp: '(' IF test than elsee ')'

   51 test: exp

   52 than: exp

   53 elsee: exp


Terminals, with rules where they appear

$end (0) 0
'(' (40) 15 16 25 28 29 32 33 34 35 36 42 45 48 49 50
')' (41) 15 16 25 28 29 32 33 34 35 36 42 45 48 49 50
'*' (42) 29
'+' (43) 25
'-' (45) 28
'/' (47) 32
'<' (60) 35
'=' (61) 36
'>' (62) 34
error (256)
number (258) 10
bval (259) 11
str (260) 14
PNUM (261) 15
PBOOL (262) 16
AND (263) 42
OR (264) 45
NOT (265) 48
IF (266) 50
DEFINE (267) 49
MOD (268) 33
"+" (269)
"-" (270)
"*" (271)
"/" (272)
"\n" (273) 2


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
program (29)
    on left: 1 2, on right: 0
stmt (30)
    on left: 3 4, on right: 1 2 4
st (31)
    on left: 5 6 7, on right: 3 4
exp (32)
    on left: 8 9 10 11 12 13, on right: 5 15 16 25 26 27 28 29 30 31
    32 33 34 35 36 37 38 42 43 44 45 46 47 48 49 51 52 53
var (33)
    on left: 14, on right: 12 49
pstmt (34)
    on left: 15 16, on right: 7
numop (35)
    on left: 17 18 19 20 21 22 23 24, on right: 8
plus (36)
    on left: 25, on right: 17
expp (37)
    on left: 26 27, on right: 25 27
minus (38)
    on left: 28, on right: 18
multi (39)
    on left: 29, on right: 19
expm (40)
    on left: 30 31, on right: 29 31
divide (41)
    on left: 32, on right: 20
mod (42)
    on left: 33, on right: 21
greater (43)
    on left: 34, on right: 22
smaller (44)
    on left: 35, on right: 23
equal (45)
    on left: 36, on right: 24
expe (46)
    on left: 37 38, on right: 36 38
logop (47)
    on left: 39 40 41, on right: 9
and (48)
    on left: 42, on right: 39
expa (49)
    on left: 43 44, on right: 42 44 47
or (50)
    on left: 45, on right: 40
expo (51)
    on left: 46 47, on right: 45
not (52)
    on left: 48, on right: 41
defstmt (53)
    on left: 49, on right: 6
ifexp (54)
    on left: 50, on right: 13
test (55)
    on left: 51, on right: 50
than (56)
    on left: 52, on right: 50
elsee (57)
    on left: 53, on right: 50


State 0

    0 $accept: . program $end

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 4

    program  go to state 5
    stmt     go to state 6
    st       go to state 7
    exp      go to state 8
    var      go to state 9
    pstmt    go to state 10
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    defstmt  go to state 24
    ifexp    go to state 25


State 1

   10 exp: number .

    $default  reduce using rule 10 (exp)


State 2

   11 exp: bval .

    $default  reduce using rule 11 (exp)


State 3

   14 var: str .

    $default  reduce using rule 14 (var)


State 4

   15 pstmt: '(' . PNUM exp ')'
   16      | '(' . PBOOL exp ')'
   25 plus: '(' . '+' exp expp ')'
   28 minus: '(' . '-' exp exp ')'
   29 multi: '(' . '*' exp expm ')'
   32 divide: '(' . '/' exp exp ')'
   33 mod: '(' . MOD exp exp ')'
   34 greater: '(' . '>' exp exp ')'
   35 smaller: '(' . '<' exp exp ')'
   36 equal: '(' . '=' exp expe ')'
   42 and: '(' . AND exp expa ')'
   45 or: '(' . OR exp expo ')'
   48 not: '(' . NOT exp ')'
   49 defstmt: '(' . DEFINE var exp ')'
   50 ifexp: '(' . IF test than elsee ')'

    PNUM    shift, and go to state 26
    PBOOL   shift, and go to state 27
    AND     shift, and go to state 28
    OR      shift, and go to state 29
    NOT     shift, and go to state 30
    IF      shift, and go to state 31
    DEFINE  shift, and go to state 32
    MOD     shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35
    '*'     shift, and go to state 36
    '/'     shift, and go to state 37
    '>'     shift, and go to state 38
    '<'     shift, and go to state 39
    '='     shift, and go to state 40


State 5

    0 $accept: program . $end

    $end  shift, and go to state 41


State 6

    1 program: stmt .
    2        | stmt . "\n"
    4 stmt: stmt . st

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    "\n"    shift, and go to state 42
    '('     shift, and go to state 4

    $default  reduce using rule 1 (program)

    st       go to state 43
    exp      go to state 8
    var      go to state 9
    pstmt    go to state 10
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    defstmt  go to state 24
    ifexp    go to state 25


State 7

    3 stmt: st .

    $default  reduce using rule 3 (stmt)


State 8

    5 st: exp .

    $default  reduce using rule 5 (st)


State 9

   12 exp: var .

    $default  reduce using rule 12 (exp)


State 10

    7 st: pstmt .

    $default  reduce using rule 7 (st)


State 11

    8 exp: numop .

    $default  reduce using rule 8 (exp)


State 12

   17 numop: plus .

    $default  reduce using rule 17 (numop)


State 13

   18 numop: minus .

    $default  reduce using rule 18 (numop)


State 14

   19 numop: multi .

    $default  reduce using rule 19 (numop)


State 15

   20 numop: divide .

    $default  reduce using rule 20 (numop)


State 16

   21 numop: mod .

    $default  reduce using rule 21 (numop)


State 17

   22 numop: greater .

    $default  reduce using rule 22 (numop)


State 18

   23 numop: smaller .

    $default  reduce using rule 23 (numop)


State 19

   24 numop: equal .

    $default  reduce using rule 24 (numop)


State 20

    9 exp: logop .

    $default  reduce using rule 9 (exp)


State 21

   39 logop: and .

    $default  reduce using rule 39 (logop)


State 22

   40 logop: or .

    $default  reduce using rule 40 (logop)


State 23

   41 logop: not .

    $default  reduce using rule 41 (logop)


State 24

    6 st: defstmt .

    $default  reduce using rule 6 (st)


State 25

   13 exp: ifexp .

    $default  reduce using rule 13 (exp)


State 26

   15 pstmt: '(' PNUM . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 45
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 27

   16 pstmt: '(' PBOOL . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 46
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 28

   42 and: '(' AND . exp expa ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 47
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 29

   45 or: '(' OR . exp expo ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 48
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 30

   48 not: '(' NOT . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 49
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 31

   50 ifexp: '(' IF . test than elsee ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 50
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25
    test     go to state 51


State 32

   49 defstmt: '(' DEFINE . var exp ')'

    str  shift, and go to state 3

    var  go to state 52


State 33

   33 mod: '(' MOD . exp exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 53
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 34

   25 plus: '(' '+' . exp expp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 54
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 35

   28 minus: '(' '-' . exp exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 55
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 36

   29 multi: '(' '*' . exp expm ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 56
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 37

   32 divide: '(' '/' . exp exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 57
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 38

   34 greater: '(' '>' . exp exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 58
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 39

   35 smaller: '(' '<' . exp exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 59
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 40

   36 equal: '(' '=' . exp expe ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 60
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 41

    0 $accept: program $end .

    $default  accept


State 42

    2 program: stmt "\n" .

    $default  reduce using rule 2 (program)


State 43

    4 stmt: stmt st .

    $default  reduce using rule 4 (stmt)


State 44

   25 plus: '(' . '+' exp expp ')'
   28 minus: '(' . '-' exp exp ')'
   29 multi: '(' . '*' exp expm ')'
   32 divide: '(' . '/' exp exp ')'
   33 mod: '(' . MOD exp exp ')'
   34 greater: '(' . '>' exp exp ')'
   35 smaller: '(' . '<' exp exp ')'
   36 equal: '(' . '=' exp expe ')'
   42 and: '(' . AND exp expa ')'
   45 or: '(' . OR exp expo ')'
   48 not: '(' . NOT exp ')'
   50 ifexp: '(' . IF test than elsee ')'

    AND  shift, and go to state 28
    OR   shift, and go to state 29
    NOT  shift, and go to state 30
    IF   shift, and go to state 31
    MOD  shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    '>'  shift, and go to state 38
    '<'  shift, and go to state 39
    '='  shift, and go to state 40


State 45

   15 pstmt: '(' PNUM exp . ')'

    ')'  shift, and go to state 61


State 46

   16 pstmt: '(' PBOOL exp . ')'

    ')'  shift, and go to state 62


State 47

   42 and: '(' AND exp . expa ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 63
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    expa     go to state 64
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 48

   45 or: '(' OR exp . expo ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 65
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    expa     go to state 66
    or       go to state 22
    expo     go to state 67
    not      go to state 23
    ifexp    go to state 25


State 49

   48 not: '(' NOT exp . ')'

    ')'  shift, and go to state 68


State 50

   51 test: exp .

    $default  reduce using rule 51 (test)


State 51

   50 ifexp: '(' IF test . than elsee ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 69
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25
    than     go to state 70


State 52

   49 defstmt: '(' DEFINE var . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 71
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 53

   33 mod: '(' MOD exp . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 72
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 54

   25 plus: '(' '+' exp . expp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 73
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    expp     go to state 74
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 55

   28 minus: '(' '-' exp . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 75
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 56

   29 multi: '(' '*' exp . expm ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 76
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    expm     go to state 77
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 57

   32 divide: '(' '/' exp . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 78
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 58

   34 greater: '(' '>' exp . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 79
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 59

   35 smaller: '(' '<' exp . exp ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 80
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 60

   36 equal: '(' '=' exp . expe ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 81
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    expe     go to state 82
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 61

   15 pstmt: '(' PNUM exp ')' .

    $default  reduce using rule 15 (pstmt)


State 62

   16 pstmt: '(' PBOOL exp ')' .

    $default  reduce using rule 16 (pstmt)


State 63

   43 expa: exp .

    $default  reduce using rule 43 (expa)


State 64

   42 and: '(' AND exp expa . ')'
   44 expa: expa . exp

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44
    ')'     shift, and go to state 83

    exp      go to state 84
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 65

   43 expa: exp .
   46 expo: exp .

    ')'       reduce using rule 46 (expo)
    $default  reduce using rule 43 (expa)


State 66

   44 expa: expa . exp
   47 expo: expa . exp

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 85
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 67

   45 or: '(' OR exp expo . ')'

    ')'  shift, and go to state 86


State 68

   48 not: '(' NOT exp ')' .

    $default  reduce using rule 48 (not)


State 69

   52 than: exp .

    $default  reduce using rule 52 (than)


State 70

   50 ifexp: '(' IF test than . elsee ')'

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44

    exp      go to state 87
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25
    elsee    go to state 88


State 71

   49 defstmt: '(' DEFINE var exp . ')'

    ')'  shift, and go to state 89


State 72

   33 mod: '(' MOD exp exp . ')'

    ')'  shift, and go to state 90


State 73

   26 expp: exp .

    $default  reduce using rule 26 (expp)


State 74

   25 plus: '(' '+' exp expp . ')'
   27 expp: expp . exp

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44
    ')'     shift, and go to state 91

    exp      go to state 92
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 75

   28 minus: '(' '-' exp exp . ')'

    ')'  shift, and go to state 93


State 76

   30 expm: exp .

    $default  reduce using rule 30 (expm)


State 77

   29 multi: '(' '*' exp expm . ')'
   31 expm: expm . exp

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44
    ')'     shift, and go to state 94

    exp      go to state 95
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 78

   32 divide: '(' '/' exp exp . ')'

    ')'  shift, and go to state 96


State 79

   34 greater: '(' '>' exp exp . ')'

    ')'  shift, and go to state 97


State 80

   35 smaller: '(' '<' exp exp . ')'

    ')'  shift, and go to state 98


State 81

   37 expe: exp .

    $default  reduce using rule 37 (expe)


State 82

   36 equal: '(' '=' exp expe . ')'
   38 expe: expe . exp

    number  shift, and go to state 1
    bval    shift, and go to state 2
    str     shift, and go to state 3
    '('     shift, and go to state 44
    ')'     shift, and go to state 99

    exp      go to state 100
    var      go to state 9
    numop    go to state 11
    plus     go to state 12
    minus    go to state 13
    multi    go to state 14
    divide   go to state 15
    mod      go to state 16
    greater  go to state 17
    smaller  go to state 18
    equal    go to state 19
    logop    go to state 20
    and      go to state 21
    or       go to state 22
    not      go to state 23
    ifexp    go to state 25


State 83

   42 and: '(' AND exp expa ')' .

    $default  reduce using rule 42 (and)


State 84

   44 expa: expa exp .

    $default  reduce using rule 44 (expa)


State 85

   44 expa: expa exp .
   47 expo: expa exp .

    ')'       reduce using rule 47 (expo)
    $default  reduce using rule 44 (expa)


State 86

   45 or: '(' OR exp expo ')' .

    $default  reduce using rule 45 (or)


State 87

   53 elsee: exp .

    $default  reduce using rule 53 (elsee)


State 88

   50 ifexp: '(' IF test than elsee . ')'

    ')'  shift, and go to state 101


State 89

   49 defstmt: '(' DEFINE var exp ')' .

    $default  reduce using rule 49 (defstmt)


State 90

   33 mod: '(' MOD exp exp ')' .

    $default  reduce using rule 33 (mod)


State 91

   25 plus: '(' '+' exp expp ')' .

    $default  reduce using rule 25 (plus)


State 92

   27 expp: expp exp .

    $default  reduce using rule 27 (expp)


State 93

   28 minus: '(' '-' exp exp ')' .

    $default  reduce using rule 28 (minus)


State 94

   29 multi: '(' '*' exp expm ')' .

    $default  reduce using rule 29 (multi)


State 95

   31 expm: expm exp .

    $default  reduce using rule 31 (expm)


State 96

   32 divide: '(' '/' exp exp ')' .

    $default  reduce using rule 32 (divide)


State 97

   34 greater: '(' '>' exp exp ')' .

    $default  reduce using rule 34 (greater)


State 98

   35 smaller: '(' '<' exp exp ')' .

    $default  reduce using rule 35 (smaller)


State 99

   36 equal: '(' '=' exp expe ')' .

    $default  reduce using rule 36 (equal)


State 100

   38 expe: expe exp .

    $default  reduce using rule 38 (expe)


State 101

   50 ifexp: '(' IF test than elsee ')' .

    $default  reduce using rule 50 (ifexp)
